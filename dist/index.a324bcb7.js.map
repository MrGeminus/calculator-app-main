{"mappings":"AAAA,MAAM,WAAW,GAAgB,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,AAAC;AAChE,MAAM,iBAAiB,GAAiC,QAAQ,CAAC,gBAAgB,CAAC,qBAAqB,CAAC,AAAC;AACzG,MAAM,aAAa,GAAkC,QAAQ,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,AAAC;AACpG,MAAM,qBAAqB,GAAyB,QAAQ,CAAC,aAAa,CAAC,wBAAwB,CAAC,AAAC;AACrG,MAAM,sBAAsB,GAAyB,QAAQ,CAAC,aAAa,CAAC,yBAAyB,CAAC,AAAC;AAEvG,IAAI,cAAc,GAAW,GAAG,AAAC;AACjC,IAAI,eAAe,GAAW,EAAE,AAAC;AACjC,IAAI,SAAS,GAAkB,IAAI,AAAC;AAEpC,MAAM,kBAAkB,GAAG,CAAC,KAAa,GAAa;IAClD,OAAO,KAAK,CAAC,OAAO,oCAAoC,GAAG,CAAC,CAAA;CAC/D;AAED,MAAM,gBAAgB,GAAG,CAAC,GAAW,GAAW;IAC5C,IAAI,cAAc,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,GAAG,KAAK,GAAG,EAAE,OAAM;IACvD,IAAI,cAAc,KAAK,GAAG,IAAI,GAAG,KAAK,GAAG,EAAE,cAAc,GAAG,GAAG,CAAC;SAC3D,cAAc,IAAI,GAAG,CAAC;CAC9B;AAED,MAAM,kBAAkB,GAAG,IAAY;IACnC,IAAI,MAAM,AAAQ;IAClB,MAAM,QAAQ,GAAW,MAAM,CAAC,eAAe,CAAC;IAChD,MAAM,OAAO,GAAW,MAAM,CAAC,cAAc,CAAC,AAAC;IAC/C,IAAI,KAAK,CAAC,QAAQ,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,EAAE,OAAM;IAC7C,OAAQ,SAAS;QACb,KAAM,GAAG;YACL,MAAM,GAAI,QAAQ,GAAG,OAAO,AAAC,AA3BzC;YA4BY,MAAM;QACV,KAAM,GAAG;YACL,MAAM,GAAI,QAAQ,GAAG,OAAO,AAAC,AA9BzC;YA+BY,MAAM;QACV,KAAM,GAAG;YACL,MAAM,GAAI,QAAQ,GAAG,OAAO,AAAC,AAjCzC;YAkCY,MAAM;QACV,KAAM,GAAG;YACL,MAAM,GAAI,QAAQ,GAAG,OAAO,AAAC,AApCzC;YAqCY,MAAM;QACV;YACI,OAAM;KACb;IACD,cAAc,GAAG,MAAM,CAAC,QAAQ,EAAE,AAzCtC;IA0CI,SAAS,GAAG,IAAI,AA1CpB;IA2CI,eAAe,GAAG,EAAE,AA3CxB;CA4CC;AAED,MAAM,YAAY,GAAG,CAAC,GAAW,GAAW;IACxC,IAAI,cAAc,KAAK,GAAG,EAAE,OAAM;IAClC,IAAI,eAAe,KAAK,EAAE,EACtB,kBAAkB,EAAE,AAjD5B;IAmDI,SAAS,GAAG,GAAG,CAAC;IAChB,eAAe,GAAG,cAAc,CAAC;IACjC,cAAc,GAAG,GAAG,CAAC;CACxB;AAED,MAAM,mBAAmB,GAAG,IAAY;IACpC,IAAI,SAAS,GAAW,cAAc,AAAC;IACvC,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE,SAAS,GAAG,GAAG,AA1D/C;SA2DS,SAAS,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;IACxC,cAAc,GAAG,SAAS,CAAC;CAC9B;AAED,MAAM,YAAY,GAAG,IAAY;IAC7B,cAAc,GAAG,GAAG,CAAC;IACrB,eAAe,GAAG,EAAE,CAAC;IACrB,SAAS,GAAG,IAAI,CAAC;CACpB;AAED,MAAM,aAAa,GAAG,IAAY;IAC9B,qBAAqB,CAAC,WAAW,GAAG,kBAAkB,CAAC,cAAc,CAAC,CAAC;IACvE,IAAI,SAAS,KAAK,IAAI,EAAE,sBAAsB,CAAC,WAAW,GAAG,CAAC,EAAE,kBAAkB,CAAC,eAAe,CAAC,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC;SAC9G,sBAAsB,CAAC,WAAW,GAAG,EAAE,CAAC;CAChD;AAED,MAAM,iBAAiB,GAAG,CAAC,GAAW,GAAW;IAC7C,IAAI,kBAAoB,IAAI,CAAC,GAAG,CAAC,EAAE;QAC/B,YAAY,CAAC,GAAG,CAAC,CAAC;QAClB,aAAa,EAAE,CAAC;KACnB;IACD,IAAI,YAAc,IAAI,CAAC,GAAG,CAAC,EAAE;QACzB,gBAAgB,CAAC,GAAG,CAAC,CAAC;QACtB,aAAa,EAAE,CAAC;KACnB;IACD,IAAI,MAAQ,IAAI,CAAC,GAAG,CAAC,IAAI,GAAG,KAAK,OAAO,EAAE;QACtC,kBAAkB,EAAE,CAAC;QACrB,aAAa,EAAE,CAAC;KACnB;IACD,IAAI,GAAG,KAAK,WAAW,EAAE;QACrB,mBAAmB,EAAE,CAAC;QACtB,aAAa,EAAE,CAAC;KACnB;IACD,IAAI,GAAG,KAAK,QAAQ,EAAE;QAClB,YAAY,EAAE,CAAC;QACf,aAAa,EAAE,CAAC;KACnB;CACJ;AAED,aAAa,CAAC,OAAO,CAAC,CAAC,YAA+B,GAAK;IACvD,YAAY,CAAC,gBAAgB,CAAC,OAAO,EAAE,CAAC,KAAY,GAAK;QACrD,MAAM,cAAc,GAAG,KAAK,CAAC,MAAM,AAAqB;QACxD,MAAM,SAAS,GAAW,cAAc,CAAC,OAAO,CAAC,SAAS,AAAC;QAC3D,iBAAiB,CAAC,SAAS,CAAC,AAtGpC;KAuGK,CAAC,AAvGN;CAwGC,CAAC,AAxGF;AA0GA,QAAQ,CAAC,gBAAgB,CAAC,SAAS,EAAE,CAAC,KAAoB,GAAW;IACjE,MAAM,WAAW,GAAW,KAAK,CAAC,GAAG,AAAC;IACtC,iBAAiB,CAAC,WAAW,CAAC,AA5GlC;CA6GC,CAAC,AA7GF;AA+GA,MAAM,UAAU,GAAG,CAAC,aAAqB,GAAW;IAChD,wBAAwB;IACxB,WAAW,CAAC,OAAO,CAAC,KAAK,GAAG,aAAa,AAjH7C;IAkHI,8BAA8B;IAC9B,YAAY,CAAC,OAAO,CAAC,OAAO,EAAE,aAAa,CAAC,AAnHhD;CAoHC;AAED,MAAM,UAAU,GAAG,CAAC,aAAa,EAAE,YAAY,GAAW,EAEzD;AAED,iBAAiB,CAAC,OAAO,CAAC,CAAC,gBAAkC,GAAK;IAC9D,gBAAgB,CAAC,gBAAgB,CAAC,OAAO,EAAE,CAAC,KAAY,GAAK;QACzD,MAAM,mBAAmB,GAAG,KAAK,CAAC,MAAM,AAAoB;QAC5D,MAAM,cAAc,GAAW,mBAAmB,CAAC,OAAO,CAAC,WAAW,AAAC;QACvE,MAAM,YAAY,GAAW,WAAW,CAAC,OAAO,CAAC,KAAK,AAAC;QACvD,UAAU,CAAC,cAAc,EAAE,YAAY,CAAC,AA/HhD;QAgIQ,UAAU,CAAC,cAAc,CAAC,CAAC;KAC9B,CAAC,AAjIN;CAkIC,CAAC,AAlIF;AAoIA,MAAM,eAAe,GAAG,IAAY;IAChC,IAAI,KAAK,AAAQ;IACjB,IAAI,WAAW,GAAkB,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC;IAC9D,4CAA4C;IAC5C,IAAI,WAAW,KAAK,IAAI,EACpB,KAAK,GAAG,WAAW,CAAC;SAIpB,KAAK,GAAG,MAAM,CAAC;IAEnB,UAAU,CAAC,KAAK,CAAC,CAAC;CACrB;AAED,eAAe,EAAE,AAlJjB","sources":["src/ts/script.ts"],"sourcesContent":["const rootElement: HTMLElement = document.querySelector(\"html\");\r\nconst themeRadioButtons: NodeListOf<HTMLInputElement> = document.querySelectorAll(\"[data-theme-option]\");\r\nconst keypadButtons: NodeListOf<HTMLButtonElement> = document.querySelectorAll(\"[data-button-key]\");\r\nconst currentOperandElement: HTMLParagraphElement = document.querySelector(\"[data-current-operand]\");\r\nconst previousOperandElement: HTMLParagraphElement = document.querySelector(\"[data-previous-operand]\");\r\n\r\nlet currentOperand: string = \"0\";\r\nlet previousOperand: string = \"\";\r\nlet operation: string | null = null;\r\n\r\nconst formatDisplayValue = (value: string): string => {\r\n    return value.replace(/\\B(?<!\\.\\d*)(?=(\\d{3})+(?!\\d))/g, \",\")\r\n}\r\n\r\nconst setDisplayValues = (key: string): void => {\r\n    if (currentOperand.includes(\".\") && key === \".\") return\r\n    if (currentOperand === \"0\" && key !== \".\") currentOperand = key;\r\n    else currentOperand += key;\r\n}\r\n\r\nconst performCalculation = (): void => {\r\n    let result: number\r\n    const privious: number = Number(previousOperand)\r\n    const current: number = Number(currentOperand);\r\n    if (isNaN(privious) || isNaN(current)) return\r\n    switch (operation) {\r\n        case (\"+\"):\r\n            result = (privious + current)\r\n            break;\r\n        case (\"-\"):\r\n            result = (privious - current)\r\n            break;\r\n        case (\"*\"):\r\n            result = (privious * current)\r\n            break;\r\n        case (\"/\"):\r\n            result = (privious / current)\r\n            break;\r\n        default:\r\n            return\r\n    }\r\n    currentOperand = result.toString()\r\n    operation = null\r\n    previousOperand = \"\"\r\n}\r\n\r\nconst setOperation = (key: string): void => {\r\n    if (currentOperand === \"0\") return\r\n    if (previousOperand !== \"\") {\r\n        performCalculation()\r\n    }\r\n    operation = key;\r\n    previousOperand = currentOperand;\r\n    currentOperand = \"0\";\r\n}\r\n\r\nconst deleteLastCharacter = (): void => {\r\n    let undoValue: string = currentOperand;\r\n    if (undoValue.length === 1) undoValue = \"0\"\r\n    else undoValue = undoValue.slice(0, -1);\r\n    currentOperand = undoValue;\r\n}\r\n\r\nconst clearDisplay = (): void => {\r\n    currentOperand = \"0\";\r\n    previousOperand = \"\";\r\n    operation = null;\r\n}\r\n\r\nconst updateDisplay = (): void => {\r\n    currentOperandElement.textContent = formatDisplayValue(currentOperand);\r\n    if (operation !== null) previousOperandElement.textContent = `${formatDisplayValue(previousOperand)} ${operation}`;\r\n    else previousOperandElement.textContent = \"\";\r\n}\r\n\r\nconst handleSelectedKey = (key: string): void => {\r\n    if ((/[+]|[-]|[/]|[*]/).test(key)) {\r\n        setOperation(key);\r\n        updateDisplay();\r\n    }\r\n    if ((/[0-9]|[.]/).test(key)) {\r\n        setDisplayValues(key);\r\n        updateDisplay();\r\n    }\r\n    if ((/[=]/).test(key) || key === 'Enter') {\r\n        performCalculation();\r\n        updateDisplay();\r\n    }\r\n    if (key === 'Backspace') {\r\n        deleteLastCharacter();\r\n        updateDisplay();\r\n    }\r\n    if (key === 'Delete') {\r\n        clearDisplay();\r\n        updateDisplay();\r\n    }\r\n}\r\n\r\nkeypadButtons.forEach((keypadButton: HTMLButtonElement) => {\r\n    keypadButton.addEventListener(\"click\", (event: Event) => {\r\n        const selectedButton = event.target as HTMLButtonElement\r\n        const buttonKey: string = selectedButton.dataset.buttonKey;\r\n        handleSelectedKey(buttonKey)\r\n    })\r\n})\r\n\r\ndocument.addEventListener(\"keydown\", (event: KeyboardEvent): void => {\r\n    const selectedKey: string = event.key;\r\n    handleSelectedKey(selectedKey)\r\n})\r\n\r\nconst applyTheme = (selectedTheme: string): void => {\r\n    // set theme of the page\r\n    rootElement.dataset.theme = selectedTheme\r\n    // save theme to local storage\r\n    localStorage.setItem(\"theme\", selectedTheme)\r\n}\r\n\r\nconst moveSlider = (selectedTheme, currentTheme): void => {\r\n\r\n}\r\n\r\nthemeRadioButtons.forEach((themeRadioButton: HTMLInputElement) => {\r\n    themeRadioButton.addEventListener(\"click\", (event: Event) => {\r\n        const selectedRadioButton = event.target as HTMLInputElement\r\n        const selecetedTheme: string = selectedRadioButton.dataset.themeOption;\r\n        const currentTheme: string = rootElement.dataset.theme;\r\n        moveSlider(selecetedTheme, currentTheme)\r\n        applyTheme(selecetedTheme);\r\n    })\r\n})\r\n\r\nconst setInitialTheme = (): void => {\r\n    let theme: string\r\n    let storedTheme: string | null = localStorage.getItem(\"theme\")\r\n    // check if theme is stored in local storage\r\n    if (storedTheme !== null) {\r\n        theme = storedTheme;\r\n    }\r\n    // if not, use default blue theme\r\n    else {\r\n        theme = \"blue\";\r\n    }\r\n    applyTheme(theme);\r\n}\r\n\r\nsetInitialTheme()"],"names":[],"version":3,"file":"index.a324bcb7.js.map","sourceRoot":"/__parcel_source_root/"}